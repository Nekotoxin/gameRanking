#文件名:函数和接口文档.txt
#功能：写函数和用函数的接口文档


@123:需要**函数
@456:写函数的
示例：
@123:写明对函数功能的要求，向函数提供什么参数，返回值（说清楚类型）
@456写完后：在这里写明函数的位置，函数的名称，出现异常时的返回值及其含义

11/24
to @hughdazz
user_info类需要继承UserMixin类
find_user(user_id)   #根据user_id返回user对象,直接返回user_info.get(user_id)
check_username_password(user_name,password)     传入user_name和password(字符串已经加密)
若正确返回对应user实例，若不存在用户返回cantfind字符串，若密码不正确返回passwordincorrect字符串
add_new_user(user_name,password)  加入新用户，无需返回值
change_userid(user,new_name)传入user实例，将user的名字修改为new_name成功返回success反之返回fail
change_userpassword(current_user, new_password)传入user实例，将user的密码修改为new_password成功返回success反之返回fail
delete_user(user)传入user实例，删除账户，成功返回success反之返回fail

11/25 说明 to @royzhz
@Nekotoxin 
userhome.html网页提交内容：
name="game_title" type="text"
name="release_date" type="date"
name="game_description" type="text"
name="game_type" type="text"
name="game_company" type="text

name="game_cover" type="file" 
name="game_screenshot1" type="file" 
name="game_screenshot2" type="file" 
name="game_screenshot3" type="file" 
name="game_screenshot4" type="file" 
name="game_screenshot5" type="file" 
（file均为图片类型）

11/25 to @royzhz
@hughdazz
数据库：
新增接口如下:

**查询到返回对象，否则返回False(bool型)
def find_user(user_id)
**删除成功返回True,否则返回False
def delete_user(user_id)
**name和password正确则返回对象，否则失败先后返回'name not found!','password incorrect'
def check_username_password(name,passw)
**添加成功则返回对象,失败返回'name has existed'
def add_new_user(name,passw)
**更改用户不存在返回'user not found!',更改成功返回True,失败返回False(名字已被占用)
def change_username(user_id,new_name)

对于change_userpassword不增加接口，直接在查询/保存对象上更改即可

数据库模型更改:
user添加user_email字段，user_password字段
user_name,user_email添加unique属性，该属性要求唯一值，声明unique后该字段变为与user_id等价的用户唯一标志值

11/25 to @royzhz
@hughdazz
数据库：
函数返回值更改：
凡原来返回对象的改为返回对象id：

新增接口如下：
**传入id,表名，字段名，新值来更改数据库数据，不检查正误
def update_item_value(id,table_name,table_word,new_value)
**传入id,表名，字段名 返回数据库数据，不检查正误
def get_item_value(id,table_name,table_word)

@hughdazz user_info.user_id修改为user_info.id

11/26 @Nekotoxin
to @royzhz
新增响应：
用户主页界面:展示用户收藏过的游戏,用户发表的感想和增加游戏的入口(一个按钮)
http://127.0.0.1:5000/<user_name>/userhome(响应在user.py中)
传入：current_user对象
     collectGames列表(类型:game_info):用户收藏的游戏
     comments列表(类型:comment):用户发表的评论
     commentGames(类型:game_info):用户发表评论所对应的游戏(例如comments[1]对应commentGames[1])

提交新游戏界面:
http://127.0.0.1:5000/submitNewGame(响应在user.py中)
传入:current_user对象
POST方式：
用户上传
name="game_title" type="text"
name="release_date" type="date"
name="game_description" type="text"
name="game_type" type="text"
name="game_company" type="text

name="game_cover" type="file" 
name="game_screenshot1" type="file" 
name="game_screenshot2" type="file" 
name="game_screenshot3" type="file" 
name="game_screenshot4" type="file" 
name="game_screenshot5" type="file" 

设置界面:修改头像,姓名,密码和邮箱
头像为文件,新的密码 自我介绍及姓名通过form['***']获取
http://127.0.0.1:5000/<user_name>/settings(响应在user.py中)
传入:current_user对象
POST方式：
用户上传:
头像(图片文件):newAvatar
(注册时给用户增加一个默认头像 用户上传的头像存在userMaterialStock/id.x中 id为用户的id x为图片后缀)
新的名字:newUsername
新的密码:newPassword(不管旧密码,只要新密码不为空,就修改密码)
新的自我介绍:newDescription











