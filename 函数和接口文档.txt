#文件名:函数和接口文档.txt
#功能：写函数和用函数的接口文档


@123:需要**函数
@456:写函数的
示例：
@123:写明对函数功能的要求，向函数提供什么参数，返回值（说清楚类型）
@456写完后：在这里写明函数的位置，函数的名称，出现异常时的返回值及其含义

11/24
to @hughdazz
user_info类需要继承UserMixin类
find_user(user_id)   #根据user_id返回user对象,直接返回user_info.get(user_id)
check_username_password(user_name,password)     传入user_name和password(字符串已经加密)
若正确返回对应user实例，若不存在用户返回cantfind字符串，若密码不正确返回passwordincorrect字符串
add_new_user(user_name,password)  加入新用户，无需返回值
change_userid(user,new_name)传入user实例，将user的名字修改为new_name成功返回success反之返回fail
change_userpassword(current_user, new_password)传入user实例，将user的密码修改为new_password成功返回success反之返回fail
delete_user(user)传入user实例，删除账户，成功返回success反之返回fail

11/25 说明 to @royzhz
@Nekotoxin 
userhome.html网页提交内容：
name="game_title" type="text"
name="release_date" type="date"
name="game_description" type="text"
name="game_type" type="text"
name="game_company" type="text

name="game_cover" type="file" 
name="game_screenshot1" type="file" 
name="game_screenshot2" type="file" 
name="game_screenshot3" type="file" 
name="game_screenshot4" type="file" 
name="game_screenshot5" type="file" 
（file均为图片类型）

11/25 to @royzhz
@hughdazz
数据库：
新增接口如下:

**查询到返回对象，否则返回False(bool型)
def find_user(user_id)
**删除成功返回True,否则返回False
def delete_user(user_id)
**name和password正确则返回对象，否则失败先后返回'name not found!','password incorrect'
def check_username_password(name,passw)
**添加成功则返回对象,失败返回'name has existed'
def add_new_user(name,passw)
**更改用户不存在返回'user not found!',更改成功返回True,失败返回False(名字已被占用)
def change_username(user_id,new_name)

对于change_userpassword不增加接口，直接在查询/保存对象上更改即可

数据库模型更改:
user添加user_email字段，user_password字段
user_name,user_email添加unique属性，该属性要求唯一值，声明unique后该字段变为与user_id等价的用户唯一标志值

11/25 to @royzhz
@hughdazz
数据库：
函数返回值更改：
凡原来返回对象的改为返回对象id：

新增接口如下：
**传入id,表名，字段名，新值来更改数据库数据，不检查正误
def update_item_value(id,table_name,table_word,new_value)
**传入id,表名，字段名 返回数据库数据，不检查正误
def get_item_value(id,table_name,table_word)

@hughdazz user_info.user_id修改为user_info.id

11/26 @Nekotoxin
to @royzhz
新增响应：
用户主页界面:展示用户收藏过的游戏,用户发表的感想和增加游戏的入口(一个按钮)
http://127.0.0.1:5000/user/<user_name>(响应在user.py中)
传入：current_user对象
     collectGames列表(类型:game_info):用户收藏的游戏
     comments列表(类型:comment):用户发表的评论
     commentGames(类型:game_info):用户发表评论所对应的游戏(例如comments[1]对应commentGames[1])

提交新游戏界面:
http://127.0.0.1:5000/user/submitNewGame(响应在user.py中)
传入:current_user对象
POST方式：
用户上传
name="game_title" type="text"
name="release_date" type="date"
name="game_description" type="text"
name="game_type" type="text"
name="game_company" type="text

name="game_cover" type="file" 
name="game_screenshot1" type="file" 
name="game_screenshot2" type="file" 
name="game_screenshot3" type="file" 
name="game_screenshot4" type="file" 
name="game_screenshot5" type="file" 

设置界面:修改头像,姓名,密码和邮箱
头像为文件,新的密码 自我介绍及姓名通过form['***']获取
http://127.0.0.1:5000/user/<user_name>/settings(响应在user.py中)
传入:current_user对象
POST方式：
用户上传:
头像(图片文件):newAvatar
(注册时给用户增加一个默认头像 用户上传的头像存在userMaterialStock/id.x中 id为用户的id x为图片后缀)
新的名字:newUsername
新的密码:newPassword(不管旧密码,只要新密码不为空,就修改密码)
新的自我介绍:newDescription


12/1 to@hughdazz
get_collect_games(id)       传入id返回用户收藏的游戏（列表）
get_comments(id)            传入id用户发表的评论和游戏（传回一个列表，包含两个列表，第一个用户是发表的评论，第二个是用户发表评论所对应的游戏(例如comments[1]对应commentGames[1]）
add_new_user                函数需要在userMaterialStock下建立用户id文件夹）
add_game                    函数需要在gameMaterialStock下建立游戏id文件夹

12/4 to@hughdazz
函数需求：
1.用户收藏某个游戏
参数:user_id game_id
2.用户取消收藏某个游戏
参数:user_id game_id
3.获取用户对某个游戏的收藏状态
参数:user_id game_id
4.获取用户收藏的所有游戏列表(返回类型为game列表)
参数:user_id
5.用户玩过某个游戏
参数:user_id game_id
6.用户取消玩过某个游戏
参数:user_id game_id
7.获取用户对某个游戏的玩过状态
参数:user_id game_id
8.获取用户玩过的所有游戏列表(返回类型为game列表)
参数:user_id
9.comment添加属性：感想的标题comment_title，用户名
10.获取某个游戏各分数段的评分用户数量
参数:game_id
返回：一个列表 5个数，分别为1-5分的用户数量
11.获取某个用户的所有评论
参数:user_id

12/4 to Line 122
1.def collect_game(user_id,game_id):
2.def incollect_game(user_id,game_id):
3.def is_collect(user_id,game_id):
4.def collect_list(user_id):            //返回game_id list
5.def exper_game(user_id,game_id):
6.def inexper_game(user_id,game_id):
7.def is_exper(user_id,game_id):
8.def exper_list(user_id):              //返回game_id list
9.comment_title已添加,   get_item_value已更新
10.def score_list(game_id):
11.get_item_value已更新
table_name='user_info'
table_word='comments'
返回comment_id list

ps添加收藏或者玩过游戏时，先判断是否已经收藏或者玩过

12.6 to@hughdazz
1.给游戏对象添加：
     平均分属性
     开发游戏的公司属性
     游戏的类型属性（可直接使用game['game_type']方法获取）
     游戏的发布日期（目前只有添加游戏的时间）

12.6 to Line 165
已完成

12.10 
to @hughdazz
1.开发mainpage.py:
    1.mainpage.html中collectButton按下:
        url: "{{url_for('mainpage.collect')}}"
        data: {
                        game_id: game_id,
              }
        user_id 直接用 current_user.get_id() 获取
        如果未收藏，则收藏，返回:'collectSuccess'
        如果已收藏，则取消收藏，返回:'cancelSuccess'
        否则返回:'fail'
    2.根据网页选择的筛选项写响应函数:
        例如：http://127.0.0.1:5000/?game_year=2019,则筛选2019年发行的游戏的展示
to @royzhz
1.bug fix：
    登陆后点击主页 修改用户设置 ，保存后出错
2.userhome.html需要的新参数（对应user_home()）:
    1.list类:userCollectGames 用户收藏的游戏
    2.list类:userComments 用户发表的评论 ------ GamesOfUserComments
        例如:userComments[0]对应的游戏为GamesOfUserComments[0]
    3.字符串类：userMaterialPath:存放用户信息的文件夹路径








